/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {

        List<List<Integer>> ans=new ArrayList<>();

        if( root == null )
            return ans;

        Deque<TreeNode> q=new LinkedList<>();
        q.offer(root);

        boolean reverse=false;

        while(!q.isEmpty()){

            List<Integer> currList=new ArrayList<>();
            int qSize=q.size();

            if(!reverse){

                for(int i=0;i<qSize;i++){
                    TreeNode currNode=q.pollFirst();
                    currList.add(currNode.val);

                    if(currNode.left!=null)
                        q.offerLast(currNode.left);

                    if(currNode.right!=null)
                        q.offerLast(currNode.right);
                }

            }else{

                for(int i=0;i<qSize;i++){
                    TreeNode currNode=q.pollLast();
                    currList.add(currNode.val);

                    if(currNode.right!=null)
                        q.offerFirst(currNode.right);

                    if(currNode.left!=null)
                        q.offerFirst(currNode.left);

                }
            }
            reverse=!reverse;
            ans.add(currList);
        }
        return ans;
    }
}

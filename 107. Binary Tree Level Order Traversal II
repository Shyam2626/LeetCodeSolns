/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {

        List<List<Integer>> ans=new ArrayList<>();

        if(root==null)
            return ans;

        Queue<TreeNode> q=new LinkedList<>();
        q.offer(root);

        while(!q.isEmpty()){
            int qSize=q.size();
            List<Integer> currList= new ArrayList<>();
            
            for(int i=0;i<qSize;i++){

                TreeNode currNode=q.poll();
                currList.add(currNode.val);

                if(currNode.left!=null)
                    q.offer(currNode.left);

                if(currNode.right!=null)
                    q.offer(currNode.right);
            }
            ans.add(currList); // Or use ans.add(0,currList) so sort is reverse() is required

        }

        Collections.reverse(ans);
        return ans;

    }
}

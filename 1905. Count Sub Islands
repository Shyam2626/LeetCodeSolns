class Pair{
    int row , col;
    Pair(int row , int col){
        this.row = row;
        this.col = col;
    }
}
class Solution {
    public int countSubIslands(int[][] grid1 , int[][] grid2) {

        int m = grid1.length;
        int n = grid1[0].length;

        int ansCount = 0;

        for(int i = 0 ; i < m ; i++ ){
            for(int j = 0 ; j < n ; j++){
                if(grid2[i][j] == 1){
                    List<Pair> list = new ArrayList<>();
                    dfs(grid2 , i , j , m , n , list);
                    if(Check(grid1 , list))
                        ansCount++;
                }
            }
        }

        return ansCount;
        
    }

    public void dfs(int[][] grid , int r , int c , int m , int n ,List<Pair> list){
        list.add(new Pair(r , c));
        grid[r][c] = 0;

        int arr1[] = {0 , 0 , -1 , 1};
        int arr2[] = {-1 , 1 , 0 , 0};

        for(int i = 0 ; i < 4 ; i++){

            int nr = r + arr1[i];
            int nc = c + arr2[i];

            if(nr >= 0 && nc >= 0 && nr < m && nc < n && grid[nr][nc] == 1){
                dfs(grid , nr , nc , m , n , list);
            }
        }
    }

    public boolean Check(int[][] grid , List<Pair> list){
        for(Pair pair : list)
            if(grid[pair.row][pair.col] == 0)
                return false;

        return true;
    }
}

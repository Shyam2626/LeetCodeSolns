class Solution {
    public boolean canFinish(int numCourses, int[][] prereq) {
        
        List<List<Integer>> adj=new ArrayList<>();

        for(int i=0;i<numCourses;i++)
            adj.add(new ArrayList<>());

        for(int[] num : prereq)
            adj.get(num[0]).add(num[1]);

        int inDegree[]=new int[numCourses];

        for(int i=0;i<numCourses;i++)
            for(int num : adj.get(i))
                inDegree[num]++;

        Queue<Integer> q=new LinkedList<>();

        for(int i=0;i<numCourses;i++)
            if(inDegree[i]==0)
                q.offer(i);

        List<Integer> ans=new ArrayList<>();

        while(!q.isEmpty()){
            int node=q.poll();
            ans.add(node);

            for(int currNode : adj.get(node)){
                inDegree[currNode]--;
                if(inDegree[currNode]==0)
                    q.offer(currNode);
            }
        }

        return (ans.size() == numCourses);

    }
}

class Solution {
    public List<List<Integer>> getAncestors(int n, int[][] edges) {

        List<List<Integer>> ans=new ArrayList<>();
        List<Integer>[] adj=new List[n];

        for(int i=0;i<n;i++){
            ans.add(new ArrayList<>());
            adj[i]=new ArrayList<>();
        }

        for(int i=0;i<edges.length;i++)
            adj[edges[i][0]].add(edges[i][1]);

        for(int i=0;i<n;i++)
            dfs(adj,i,i,ans,new boolean[n]);

        return ans;
    }

    public void dfs(List<Integer>[] adj,int node,int ancestor,List<List<Integer>> ans,boolean[] visited){

        visited[node]=true;

        for(int currNode : adj[node]){

            if(visited[currNode])
                continue;

            ans.get(currNode).add(ancestor);
            dfs(adj,currNode,ancestor,ans,visited);
        }
    }
}

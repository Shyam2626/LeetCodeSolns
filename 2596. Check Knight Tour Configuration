class Solution {
    public boolean checkValidGrid(int[][] grid) {

        int n=grid.length;
        int max=n*n-1;

        if(grid[0][0]!=0)
            return false;

        return dfs(grid,n,0,0,0,max); 
    }

    public boolean dfs(int[][] grid,int n,int r,int c,int curr,int max){

        if(grid[r][c]==max)
            return true;

        if(grid[r][c]!=curr)
            return false;
        
        int arr1[]={-1,-2,-2,-1,1,2,2,1};
        int arr2[]={-2,-1,1,2,2,1,-1,-2};

        for(int i=0;i<8;i++){
            int nr=r+arr1[i];
            int nc=c+arr2[i];
            if(nr>=0 && nr<n && nc>=0 && nc<n && grid[nr][nc]==curr+1){
                return dfs(grid,n,nr,nc,curr+1,max);
            }
        }
        return false;

    }
}

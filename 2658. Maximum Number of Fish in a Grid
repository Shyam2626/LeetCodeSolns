class Solution {
    public int findMaxFish(int[][] grid) {

        int ans=0,m=grid.length,n=grid[0].length;
        boolean visited[][]=new boolean[m][n];

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]!=0 && !visited[i][j]){
                    ans=Math.max(ans,dfs(grid,visited,i,j,m,n,0));
                }
            }
        }

        return ans;
        
    }

    public int dfs(int[][] grid,boolean[][] visited,int r,int c,int m,int n,int currSum){
        
        currSum+=grid[r][c];
        visited[r][c]=true;

        int arr1[]={1,-1,0,0};
        int arr2[]={0,0,1,-1};

        for(int i=0;i<4;i++){
            int nr=r+arr1[i];
            int nc=c+arr2[i];
            if(nr>=0 && nc>=0 && nr<m && nc<n && !visited[nr][nc] && grid[nr][nc]!=0){
                currSum=dfs(grid,visited,nr,nc,m,n,currSum);
            }
        }
        return currSum;
    }
}

class Pair{
    int row,col,dist;
    Pair(int row,int col,int dist){
        this.row=row;
        this.col=col;
        this.dist=dist;
    }
}

class Solution {
    public int[][] updateMatrix(int[][] mat) { 

        int m=mat.length,n=mat[0].length;
        boolean visited[][]=new boolean[m][n];
        int distance[][]=new int[m][n];
        Queue<Pair> q=new LinkedList<>();

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(mat[i][j]==0){
                    visited[i][j]=true;
                    q.offer(new Pair(i,j,0));
                }
            }
        }

        int arr1[]={0,1,0,-1};
        int arr2[]={-1,0,1,0};

        while(!q.isEmpty()){
            int r=q.peek().row;
            int c=q.peek().col;
            int currDist=q.peek().dist;
            q.poll();
            distance[r][c]=currDist;

            for(int i=0;i<4;i++){
                int nr=r+arr1[i];
                int nc=c+arr2[i];
                if(nr>=0 && nr<m && nc>=0 && nc<n && !visited[nr][nc]){
                    visited[nr][nc]=true;
                    q.offer(new Pair(nr,nc,currDist+1));
                }
            }
        }
        return distance;
    }
}

class Solution {

    public boolean isBipartite(int[][] graph) {
        int m=graph.length;
        int[] color=new int[m];
        Arrays.fill(color,-1);

        for(int i=0;i<m;i++){
            if(color[i]==-1){
                if(!checkBipartite(i,color,graph))
                    return false;
            }
        }
        return true;
    }

    boolean checkBipartite(int node,int[] color,int[][] adj){

        Queue<Integer> q=new LinkedList<>();
        q.offer(node);
        color[node]=0;

        while(!q.isEmpty()){
            int currNode=q.peek();
            q.poll();
            for(int num : adj[currNode]){
                if(color[num]== -1){
                    color[num] = (color[currNode] == 0) ? 1 : 0;
                    q.add(num);
                }
                else if(color[num]==color[currNode])
                    return false;
            }
        }
        return true;
    }
}

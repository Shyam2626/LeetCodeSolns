class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {

        List<List<Integer>> ans = new ArrayList<>();
        List<List<Integer>> adj = new ArrayList<>();

        int n = graph.length;

        for (int i = 0; i < n; i++)
            adj.add(new ArrayList<>());

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < graph[i].length; j++)
                adj.get(i).add(graph[i][j]);
        }

        dfs(adj, ans, 0, n - 1, new ArrayList<>());
        return ans;
    }

    public void dfs(List<List<Integer>> adj, List<List<Integer>> ans, int node, int lastNode, List<Integer> currList) {

        if (node == lastNode) {
            currList.add(lastNode);
            ans.add(new ArrayList<>(currList));
            return;
        }

        currList.add(node);
        for (int currNode : adj.get(node)) {
            dfs(adj, ans, currNode, lastNode, currList);
            currList.remove(currList.size() - 1);
        }

    }

}

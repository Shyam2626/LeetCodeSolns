class Solution {
    public boolean possibleBipartition(int n, int[][] dislikes) {

        List<List<Integer>> adj=new ArrayList<>();
        int color[]=new int[n+1];
        Arrays.fill(color,-1);

        for(int i=0;i<=n;i++)
            adj.add(new ArrayList<>());

        for(int i=0;i<dislikes.length;i++){
            int f=dislikes[i][0],s=dislikes[i][1];
            adj.get(f).add(s);
            adj.get(s).add(f);
        }

        for(int i=1;i<=n;i++){
            if(color[i]==-1){
                if(!checkBipartite(color,i,adj)){
                    return false;
                }
            }
        }

        return true;
    }

    boolean checkBipartite(int[] color,int node,List<List<Integer>> adj){
        Queue<Integer> q=new LinkedList<>();
        q.offer(node);
        color[node]=0;

        while(!q.isEmpty()){
            int currNode=q.poll();
            List<Integer> currList=adj.get(currNode);

            for(int num : currList){
                if(color[num]==-1){
                    color[num]=1-color[currNode];
                    q.offer(num);
                }else if(color[num]==color[currNode])
                    return false;
            }
        }
        return true;
    }
}

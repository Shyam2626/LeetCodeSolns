class Pair{
    int row,col,time;
    Pair(int row,int col,int time){
        this.row=row;
        this.col=col;
        this.time=time;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {

        int m=grid.length,n=grid[0].length;
        int visited[][]=new int[m][n];
        Queue<Pair> q=new LinkedList<>();
        int freshOranges=0;

        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    visited[i][j]=2;
                    q.offer(new Pair(i,j,0));
                }
                if(grid[i][j]==1) freshOranges++;
            }

        int maxTime=0,freshOrangesChangedToRotten=0;
        int arr1[]={-1,0,1,0};
        int arr2[]={0,-1,0,1};

        while(!q.isEmpty()){
            int r=q.peek().row;
            int c=q.peek().col;
            int t=q.peek().time;
            maxTime=Math.max(maxTime,t);
            q.poll();

            for(int i=0;i<4;i++){
                int nr=r+arr1[i];
                int nc=c+arr2[i];
                if(nr>=0 && nr<m && nc>=0 && nc<n && visited[nr][nc]==0 && grid[nr][nc]==1){
                    visited[nr][nc]=2;
                    q.offer(new Pair(nr,nc,t+1));
                    freshOrangesChangedToRotten++;
                }
            }
        }

        return (freshOrangesChangedToRotten!=freshOranges) ? -1 : maxTime ;

    }
}

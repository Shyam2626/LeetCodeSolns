class Solution {

    public int totalNQueens(int n) {
        char ch[][]=new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++) ch[i][j]='.';
        }
        List<List<String>> ans=new ArrayList<>();
        Solve(0,ch,ans,n);
        return ans.size();
    }

    private static void Solve(int col,char[][] ch,List<List<String>> ans,int n){
        if(col==n){
            List<String> s=new ArrayList<>();
            for(int i=0;i<ch.length;i++){
                s.add(new String(ch[i]));
            }
            ans.add(new ArrayList<>(s));
        }
        
        for(int row=0;row<n;row++){
            if((col < n) && (ch[row][col] == '.') && (Queens(row,col,ch,n))){
                ch[row][col]='Q';
                Solve(col+1,ch,ans,n);
                ch[row][col]='.';
            }
        }
    }

    private static boolean Queens(int row,int col,char[][] ch,int n){
        int perRow=row,perCol=col;
        while(row>=0 && col>=0){
            if(ch[row][col]=='Q') return false;
            row--;
            col--;
        }
        col=perCol;
        row=perRow;
        while(col>=0){
            if(ch[row][col]=='Q') return false;
            col--;
        }
        col=perCol;
        row=perRow;
        while(row<n && col>=0){
            if(ch[row][col]=='Q') return false;
            row++;
            col--;
         }
        return true;
    }

}
